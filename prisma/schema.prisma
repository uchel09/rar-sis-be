generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  SCHOOL_ADMIN
  STUDENT
  TEACHER
  PARENT
  STAFF
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  SICK
  PERMISSION
  LATE // siswa terlambat
  EXCUSED // izin resmi (beda dengan permission biasa)
}

enum Semester {
  SEMESTER_1
  SEMESTER_2
}

//untuk draft baru masuk, pindah sekolah, dan naik kelas

enum DraftStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DraftType {
  NEW_ENROLLMENT // siswa baru masuk
  TRANSFER_IN // pindahan masuk
  TRANSFER_OUT // pindahan keluar
  GRADUATED // sudah lulus
}

enum StaffPosition {
  ADMINISTRATION
  FINANCE
  LIBRARY
  SECURITY
  CLEANING
  FOODCOURT
  SHOP
  BUSINESS
  OTHER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Grade {
  // SD
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6

  // SMP
  GRADE_7
  GRADE_8
  GRADE_9

  // SMA
  GRADE_10
  GRADE_11
  GRADE_12
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student?
  teacher Teacher?
  parent  Parent?
  staff   Staff?

  schoolAdmins SchoolAdmin[]
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schools School[]
}

model School {
  id             String   @id @default(uuid())
  organizationId String
  code           String   @unique
  name           String
  address        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])

  admins      SchoolAdmin[]
  classes     Class[]
  students    Student[]
  teachers    Teacher[]
  subjects    Subject[]
  staff       Staff[]
  attendances Attendance[]

  timetables Timetable[]
}

model SchoolAdmin {
  id        String   @id @default(uuid())
  userId    String
  schoolId  String
  dob       DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])

  @@unique([userId, schoolId])
}

model Student {
  id               String   @id @default(uuid())
  userId           String   @unique
  schoolId         String
  classId          String?
  enrollmentNumber String   @unique
  dob              DateTime
  address          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])
  class  Class? @relation(fields: [classId], references: [id])

  parents               StudentParent[]
  studentClassHistories StudentClassHistory[]
  attendances           Attendance[]
}

model StudentDraft {
  id               String   @id @default(uuid())
  email            String
  fullName         String
  schoolId         String
  classId          String? // kelas saat input bisa null
  targetClassId    String? // kelas tujuan (naik kelas)
  enrollmentNumber String
  dob              DateTime
  address          String?

  // Simpan sementara info orang tua/wali
  parents Json // [{ fullName: string, phone?: string, address?: string, email?: string }]
  grade   Grade

  draftType DraftType
  status    DraftStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Parent {
  id        String   @id @default(uuid())
  userId    String   @unique
  phone     String
  address   String?
  dob       DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User            @relation(fields: [userId], references: [id])
  students StudentParent[]
}

model StudentParent {
  id        String @id @default(uuid())
  studentId String
  parentId  String

  student Student @relation(fields: [studentId], references: [id])
  parent  Parent  @relation(fields: [parentId], references: [id])

  @@unique([studentId, parentId])
}

model Teacher {
  id        String   @id @default(uuid())
  userId    String   @unique
  schoolId  String
  nik       String   @unique
  nip       String?  @unique
  hireDate  DateTime
  dob       DateTime
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  school      School       @relation(fields: [schoolId], references: [id])
  classes     Class[]      @relation("ClassTeacher")
  attendances Attendance[]

  homerooms Class[] @relation("HomeroomClass")

  Timetables Timetable[]

  subjectClassTeacher SubjectClassTeacher[]
}

model Staff {
  id        String        @id @default(uuid())
  userId    String        @unique
  schoolId  String
  position  StaffPosition
  phone     String
  nik       String        @unique
  nip       String?
  dob       DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])
}

model Class {
  id                String   @id @default(uuid())
  schoolId          String
  teacherId         String? // Guru pengajar utama
  homeroomTeacherId String? // Wali kelas
  name              String
  year              Int
  grade             Grade // kelas berapa
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  school                School                @relation(fields: [schoolId], references: [id])
  teacher               Teacher?              @relation("ClassTeacher", fields: [teacherId], references: [id])
  homeroomTeacher       Teacher?              @relation("HomeroomClass", fields: [homeroomTeacherId], references: [id])
  students              Student[]
  studentClassHistories StudentClassHistory[] // gunakan camelCase

  timetables Timetable[]

  subjectClassTeacher SubjectClassTeacher[]
}

model StudentClassHistory {
  id        String   @id @default(uuid())
  studentId String
  classId   String
  year      Int
  semester  Semester

  student   Student  @relation(fields: [studentId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  schoolId  String
  grade     Grade
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school      School       @relation(fields: [schoolId], references: [id])
  attendances Attendance[]
  timetables  Timetable[]
  subjectClassTeacher SubjectClassTeacher[]
}

model Attendance {
  id          String           @id @default(uuid())
  studentId   String
  subjectId   String
  timetableId String 
  teacherId   String
  schoolId    String
  date        DateTime
  semester    Semester
  status      AttendanceStatus
  note        String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  student              Student     @relation(fields: [studentId], references: [id])
  subject              Subject     @relation(fields: [subjectId], references: [id])
  teacher              Teacher    @relation(fields: [teacherId], references: [id])
  school               School      @relation(fields: [schoolId], references: [id])
  timetableAttendances Timetable[] @relation("TimetableAttendance")

  @@unique([studentId, subjectId, date, timetableId]) // fleksibel untuk multiple session
}

model Timetable {
  id        String    @id @default(uuid())
  schoolId  String
  classId   String
  subjectId String
  teacherId String
  semester  Semester
  dayOfWeek DayOfWeek // 1 = Senin, 7 = Minggu
  startTime String // format HH:mm
  endTime   String // format HH:mm
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  school  School  @relation(fields: [schoolId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  timetableAttendances Attendance[] @relation("TimetableAttendance")
}

model SubjectClassTeacher {
  id        String @id @default(uuid())
  subjectId String
  classId   String
  teacherId String

  subject Subject @relation(fields: [subjectId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, classId, teacherId])
}
