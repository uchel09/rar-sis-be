generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./erd.svg"   // hasilnya file gambar (svg/png)
// }

enum Role {
  SUPERADMIN
  SCHOOL_ADMIN
  STUDENT
  TEACHER
  PARENT
  STAFF
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  SICK
  PERMISSION
  LATE
  EXCUSED
}

enum Semester {
  SEMESTER_1
  SEMESTER_2
}

//untuk draft baru masuk, pindah sekolah, dan naik kelas

enum DraftStatus {
  PENDING
  APPROVED_PENDING
  APPROVED
  REJECTED
}

enum DraftType {
  NEW_ENROLLMENT
  TRANSFER_UP
  TRANSFER_IN
  TRANSFER_OUT
  GRADUATED
}

enum StaffPosition {
  ADMINISTRATION
  FINANCE
  LIBRARY
  SECURITY
  CLEANING
  FOODCOURT
  SHOP
  BUSINESS
  OTHER
}

// untuk time table 
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// untuk student class history
enum StudentStatus {
  ACTIVE
  GRADUATED
  TRANSFERRED
}

enum Gender {
  MALE
  FEMALE
}

enum Grade {
  // SD
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6

  // SMP
  GRADE_7
  GRADE_8
  GRADE_9

  // SMA
  GRADE_10
  GRADE_11
  GRADE_12
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String
  gender    Gender
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student?
  teacher Teacher?
  parent  Parent?
  staff   Staff?

  schoolAdmins SchoolAdmin[]
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schools School[]
}

model School {
  id             String   @id @default(uuid())
  organizationId String
  code           String   @unique
  name           String
  address        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])

  admins      SchoolAdmin[]
  classes     Class[]
  students    Student[]
  teachers    Teacher[]
  subjects    Subject[]
  staff       Staff[]
  attendances Attendance[]

  timetables Timetable[]

  studentDrafts StudentDraft[]
}

model SchoolAdmin {
  id        String   @id @default(uuid())
  userId    String
  schoolId  String
  dob       DateTime
  nik       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])

  @@unique([userId, schoolId])
}

model Student {
  id               String   @id @default(uuid())
  userId           String   @unique
  schoolId         String
  classId          String?
  enrollmentNumber String?  @unique
  dob              DateTime
  address          String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])
  class  Class? @relation(fields: [classId], references: [id])

  parents               StudentParent[]
  studentClassHistories StudentClassHistory[]
  attendances           Attendance[]
  StudentDraft          StudentDraft[]
}

model StudentDraft {
  id               String      @id @default(uuid())
  email            String
  fullName         String
  schoolId         String
  academicYearId   String
  studentId        String?
  targetClassId    String?
  enrollmentNumber String?     @unique
  dob              DateTime
  address          String?
  parents          Json
  gender           Gender
  grade            Grade
  draftType        DraftType
  status           DraftStatus @default(PENDING)
  createdBy        String?
  verifiedBy       String?
  verifiedAt       DateTime?
  rejectionReason  String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  student      Student?     @relation(fields: [studentId], references: [id])
  school       School       @relation(fields: [schoolId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  targetClass  Class?       @relation(fields: [targetClassId], references: [id])
}

model Parent {
  id        String   @id @default(uuid())
  userId    String   @unique
  phone     String
  address   String?
  dob       DateTime?
  nik       String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User            @relation(fields: [userId], references: [id])
  students StudentParent[]
}

model StudentParent {
  id        String @id @default(uuid())
  studentId String
  parentId  String

  student Student @relation(fields: [studentId], references: [id])
  parent  Parent  @relation(fields: [parentId], references: [id])

  @@unique([studentId, parentId])
}

model Teacher {
  id        String   @id @default(uuid())
  userId    String   @unique
  schoolId  String
  nik       String   @unique
  nip       String?  @unique
  hireDate  DateTime
  dob       DateTime
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean

  user        User         @relation(fields: [userId], references: [id])
  school      School       @relation(fields: [schoolId], references: [id])
  attendances Attendance[]

  homerooms Class[] @relation("HomeroomClass")

  timetables Timetable[]

  subjectClassTeacher SubjectClassTeacher[]
}

model Staff {
  id        String        @id @default(uuid())
  userId    String        @unique
  schoolId  String
  position  StaffPosition
  phone     String
  nik       String        @unique
  nip       String?
  dob       DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isActive  Boolean

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])
}

model Class {
  id                String   @id @default(uuid())
  schoolId          String
  homeroomTeacherId String?
  name              String
  academicYearId    String
  grade             Grade
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  school                School                @relation(fields: [schoolId], references: [id])
  students              Student[]
  studentClassHistories StudentClassHistory[]
  timetables            Timetable[]

  subjectClassTeacher SubjectClassTeacher[]

  homeroomTeacher Teacher?       @relation("HomeroomClass", fields: [homeroomTeacherId], references: [id])
  academicYear    AcademicYear   @relation(fields: [academicYearId], references: [id])
  StudentDraft    StudentDraft[]
}

model StudentClassHistory {
  id             String        @id @default(uuid())
  studentId      String
  classId        String
  academicYearId String
  semester       Semester
  isRepeatedYear Boolean       @default(false)
  studentStatus  StudentStatus @default(ACTIVE)
  remark         String
  grade          Grade

  student      Student      @relation(fields: [studentId], references: [id])
  class        Class        @relation(fields: [classId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  schoolId  String
  grade     Grade
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school              School                @relation(fields: [schoolId], references: [id])
  attendances         Attendance[]
  timetables          Timetable[]
  subjectClassTeacher SubjectClassTeacher[]
}

model Attendance {
  id             String           @id @default(uuid())
  studentId      String
  subjectId      String
  timetableId    String
  teacherId      String
  schoolId       String
  date           DateTime
  semester       Semester
  status         AttendanceStatus
  note           String?
  academicYearId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  student      Student      @relation(fields: [studentId], references: [id])
  subject      Subject      @relation(fields: [subjectId], references: [id])
  teacher      Teacher      @relation(fields: [teacherId], references: [id])
  school       School       @relation(fields: [schoolId], references: [id])
  timetable    Timetable    @relation(fields: [timetableId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  @@unique([studentId, timetableId, date])
}

model Timetable {
  id             String    @id @default(uuid())
  schoolId       String
  classId        String
  subjectId      String
  teacherId      String
  semester       Semester
  dayOfWeek      DayOfWeek
  startTime      DateTime
  endTime        DateTime
  academicYearId String
  isActive       Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  school       School       @relation(fields: [schoolId], references: [id])
  class        Class        @relation(fields: [classId], references: [id])
  subject      Subject      @relation(fields: [subjectId], references: [id])
  teacher      Teacher      @relation(fields: [teacherId], references: [id])
  attendances  Attendance[]
}

model SubjectClassTeacher {
  id        String @id @default(uuid())
  subjectId String
  classId   String
  teacherId String

  subject Subject @relation(fields: [subjectId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, classId, teacherId])
}

model AcademicYear {
  id                    String                @id @default(uuid())
  name                  String                @unique
  startDate             DateTime
  endDate               DateTime
  isActive              Boolean               @default(false)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  classes               Class[]
  studentDrafts         StudentDraft[]
  studentClassHistories StudentClassHistory[]

  timetable Timetable[]

  attendance Attendance[]
}

// =================================== Gambaran Fitur Lanjutan ====================================
// model EmployeeAttendance {
//   id        String   @id @default(uuid())
//   userId    String            // bisa teacher atau staff
//   schoolId  String
//   date      DateTime          // tanggal absensi
//   checkIn   DateTime?         // jam masuk
//   checkOut  DateTime?         // jam pulang
//   status    AttendanceStatus
//   note      String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user   User   @relation(fields: [userId], references: [id])
//   school School @relation(fields: [schoolId], references: [id])

//   @@unique([userId, date]) // 1 user hanya boleh absen sekali per hari
// }

// model Assessment {
//   id          String   @id @default(uuid())
//   subjectId   String
//   classId     String
//   teacherId   String
//   schoolId    String
//   academicYearId String
//   semester    Semester
//   type        AssessmentType // TUGAS, UTS, UAS, QUIZ, dll
//   title       String
//   description String?
//   date        DateTime
//   maxScore    Int

//   subject      Subject      @relation(fields: [subjectId], references: [id])
//   class        Class        @relation(fields: [classId], references: [id])
//   teacher      Teacher      @relation(fields: [teacherId], references: [id])
//   school       School       @relation(fields: [schoolId], references: [id])
//   academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

//   grades AssessmentGrade[]
// }

// model AssessmentGrade {
//   id           String @id @default(uuid())
//   assessmentId String
//   studentId    String
//   score        Int
//   note         String?

//   assessment Assessment @relation(fields: [assessmentId], references: [id])
//   student    Student    @relation(fields: [studentId], references: [id])

//   @@unique([assessmentId, studentId])
// }

// enum AssessmentType {
//   ASSIGNMENT // Tugas
//   MID_EXAM   // UTS
//   FINAL_EXAM // UAS
//   PRACTICAL  // Praktek
//   OTHER
// }

// model Exam {
//   id             String   @id @default(uuid())
//   subjectId      String
//   classId        String
//   teacherId      String
//   academicYearId String
//   semester       Semester
//   title          String      
//   description    String?
//   startTime      DateTime
//   endTime        DateTime
//   duration       Int        
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt

//   subject      Subject      @relation(fields: [subjectId], references: [id])
//   class        Class        @relation(fields: [classId], references: [id])
//   teacher      Teacher      @relation(fields: [teacherId], references: [id])
//   academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

//   questions   ExamQuestion[]
//   studentExams StudentExam[]
// }

// model ExamQuestion {
//   id        String   @id @default(uuid())
//   examId    String
//   question  String
//   options   Json      
//   answerKey String     
//   score     Float

//   exam Exam @relation(fields: [examId], references: [id])
//   answers ExamAnswer[]
// }

// model StudentExam {
//   id        String   @id @default(uuid())
//   examId    String
//   studentId String
//   startedAt DateTime?
//   submittedAt DateTime?
//   score     Float?

//   exam    Exam    @relation(fields: [examId], references: [id])
//   student Student @relation(fields: [studentId], references: [id])
//   answers ExamAnswer[]
// }

// model ExamAnswer {
//   id            String   @id @default(uuid())
//   studentExamId String
//   questionId    String
//   answer        String
//   isCorrect     Boolean?

//   studentExam StudentExam  @relation(fields: [studentExamId], references: [id])
//   question    ExamQuestion @relation(fields: [questionId], references: [id])
// }
